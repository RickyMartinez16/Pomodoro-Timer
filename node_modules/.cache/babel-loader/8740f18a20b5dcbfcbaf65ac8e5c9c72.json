{"ast":null,"code":"var _jsxFileName = \"/Users/rickymartinez/Desktop/Pomadora Assessment 27/Project-_Pomodoro_timer-_Qualified-Ricky_Martinez-Solution/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusTimer from \"../FocusTimer\";\nimport BreakTimer from \"../BreakTimer\";\nimport PlayStopButton from \"../PlayStopButton\";\nimport TimerBar from \"../TimerBar\"; // These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore, more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher-order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You won't need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  const handleDecreaseFocus = () => {\n    // console.log(focusDuration);\n    setFocusDuration(lastFocusDuration => Math.max(5, lastFocusDuration - 5));\n  };\n\n  const handleIncreaseFocus = () => {\n    setFocusDuration(lastFocusDuration => Math.min(60, lastFocusDuration + 5));\n  };\n\n  const handleDecreaseBreak = () => {\n    setBreakDuration(lastBreakDuration => Math.max(1, lastBreakDuration - 1));\n  };\n\n  const handleIncreaseBreak = () => {\n    setBreakDuration(lastBreakDuration => Math.min(15, lastBreakDuration + 1));\n  };\n\n  const handleStopButton = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FocusTimer, {\n    focusDuration: focusDuration,\n    minutesToDuration: minutesToDuration,\n    isTimerRunning: isTimerRunning,\n    handleDecreaseFocus: handleDecreaseFocus,\n    handleIncreaseFocus: handleIncreaseFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BreakTimer, {\n    breakDuration: breakDuration,\n    minutesToDuration: minutesToDuration,\n    isTimerRunning: isTimerRunning,\n    handleDecreaseBreak: handleDecreaseBreak,\n    handleIncreaseBreak: handleIncreaseBreak,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PlayStopButton, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    handleStopButton: handleStopButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(TimerBar, {\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/rickymartinez/Desktop/Pomadora Assessment 27/Project-_Pomodoro_timer-_Qualified-Ricky_Martinez-Solution/src/pomodoro/Pomodoro.js"],"names":["React","useState","minutesToDuration","useInterval","FocusTimer","BreakTimer","PlayStopButton","TimerBar","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","Audio","play","playPause","nextState","prevStateSession","handleDecreaseFocus","lastFocusDuration","handleIncreaseFocus","min","handleDecreaseBreak","lastBreakDuration","handleIncreaseBreak","handleStopButton"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusTimer from \"../FocusTimer\";\nimport BreakTimer from \"../BreakTimer\";\nimport PlayStopButton from \"../PlayStopButton\";\nimport TimerBar from \"../TimerBar\";\n\n// These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore, more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher-order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You won't need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n\n  const handleDecreaseFocus = () => {\n    // console.log(focusDuration);\n    setFocusDuration((lastFocusDuration) => Math.max(5, lastFocusDuration - 5));\n  };\n\n  const handleIncreaseFocus = () => {\n    setFocusDuration((lastFocusDuration) => Math.min(60, lastFocusDuration +5));\n  }\n\n  const handleDecreaseBreak = () => {\n    setBreakDuration((lastBreakDuration) => Math.max(1, lastBreakDuration - 1));\n  }\n\n  const handleIncreaseBreak = () => {\n    setBreakDuration((lastBreakDuration) => Math.min(15, lastBreakDuration +1));\n  }\n\n  const handleStopButton = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n  };\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n            <FocusTimer \n              focusDuration={focusDuration}\n              minutesToDuration={minutesToDuration}\n              isTimerRunning={isTimerRunning}\n              handleDecreaseFocus={handleDecreaseFocus}\n              handleIncreaseFocus={handleIncreaseFocus}\n            />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <BreakTimer \n              breakDuration={breakDuration}\n              minutesToDuration={minutesToDuration}\n              isTimerRunning={isTimerRunning}\n              handleDecreaseBreak={handleDecreaseBreak}\n              handleIncreaseBreak={handleIncreaseBreak}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <PlayStopButton \n            playPause={playPause}\n            isTimerRunning={isTimerRunning}\n            handleStopButton={handleStopButton}\n          />\n        </div>\n      </div>\n      <TimerBar \n        session={session}\n      />\n\n    </div>\n  );\n}\n\nexport default Pomodoro;\n\n"]},"metadata":{},"sourceType":"module"}